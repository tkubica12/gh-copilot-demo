Metadata-Version: 2.4
Name: api-processing
Version: 0.1.0
Summary: FastAPI service for image processing: uploads to Blob and enqueues message to Service Bus
Author: Demo
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: fastapi
Requires-Dist: uvicorn
Requires-Dist: python-dotenv
Requires-Dist: azure-identity
Requires-Dist: azure-storage-blob
Requires-Dist: azure-servicebus
Requires-Dist: opentelemetry-api
Requires-Dist: opentelemetry-sdk
Requires-Dist: azure-monitor-opentelemetry
Requires-Dist: azure-core-tracing-opentelemetry
Requires-Dist: opentelemetry-instrumentation-fastapi
Requires-Dist: opentelemetry-instrumentation-requests
Requires-Dist: python-multipart
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-asyncio; extra == "test"
Requires-Dist: httpx; extra == "test"
Requires-Dist: asgi-lifespan; extra == "test"

# API processing

This API accepts image uploads, stores them in Azure Blob Storage, and sends a message to Azure Service Bus for processing.

You can access it at `/api/process`.

## Components Used
- Azure Storage Blob (storing images)
- Azure Service Bus (sending messages)
- Azure Monitor (monitoring and logging)

## Tests
We distinguish **unit** and **integration** tests:

- Unit tests (under `tests/unit`) run fast, have no external side‑effects and mock all Azure dependencies.
- Integration tests (under `tests/integration`) talk to real Azure resources (blob + Service Bus). They are **skipped by default**.

### Install dependencies (uv)
Sync base dependencies (runtime only):
```
uv sync
```
Include test dependencies (choose one):
```
uv sync --extra test          # use optional dependency group
# OR install dev deps (duplicates for convenience)
uv sync --dev
```

### Run unit tests only
```
uv run pytest -m "not integration" -q
```

### Run integration tests
Ensure required environment variables point to test resources, then:
```
uv run pytest -m integration -q
```

Required variables: `STORAGE_ACCOUNT_URL`, `STORAGE_CONTAINER`, `SERVICEBUS_FQDN`, `SERVICEBUS_QUEUE`, `PROCESSED_BASE_URL`, `APPLICATIONINSIGHTS_CONNECTION_STRING`.

### Run all tests
```
uv run pytest -q
```

### Markers
`integration` – real Azure calls (run explicitly with `-m integration`).

---
Tests use `pytest` fixtures in `tests/conftest.py` to inject fakes for Azure SDK clients during unit testing.

