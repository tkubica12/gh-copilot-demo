# Default values for demo-apps.
# This is a YAML-formatted file.
# Declare variables to be substituted into your templates.

global:
  registry: ""
  imageTag: "latest"
  imagePullPolicy: IfNotPresent
  environment: "dev"
  region: "eastus"
  
nameOverride: ""
fullnameOverride: ""

# Common labels
commonLabels:
  app.kubernetes.io/part-of: demo-apps
  app.kubernetes.io/managed-by: helm

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000

# Security Context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true

# Resources
resources:
  requests:
    memory: "128Mi"
    cpu: "100m"
  limits:
    memory: "512Mi"
    cpu: "500m"

# Node Selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# Ingress (DEPRECATED - will be removed in future versions)
# Please migrate to Gateway API for enhanced features and future support
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: demo-apps.example.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api/processing
          pathType: Prefix
          service: api-processing
        - path: /api/status
          pathType: Prefix
          service: api-status
  tls:
    - secretName: demo-apps-tls
      hosts:
        - demo-apps.example.com

# Gateway API (RECOMMENDED for new deployments)
# Modern, secure, and feature-rich alternative to Ingress
gateway:
  # Set to true to enable Gateway API (requires Gateway API CRDs installed)
  enabled: false
  
  # Gateway class to use (e.g., nginx, istio, envoy-gateway)
  gatewayClassName: "nginx"
  
  # Hostname for the gateway
  hostname: "demo-apps.example.com"
  
  # Optional: namespace where the gateway should be created
  # If not specified, uses the current namespace
  namespace: ""
  
  # Gateway annotations for additional configuration
  annotations: {}
    # Example annotations for enterprise features:
    # nginx.org/rate-limit: "10r/s"
    # nginx.org/timeout-upstream: "30s"
  
  # HTTP configuration
  http:
    enabled: true
  
  # TLS configuration
  tls:
    enabled: true
    secretName: "demo-apps-tls"
  
  # Allowed routes configuration for security
  allowedRoutes:
    namespaces:
      from: Same
  
  # HTTPRoute configuration
  routes:
    annotations: {}
      # Example annotations for observability:
      # nginx.org/mergeable-ingress-type: "minion"
    
    rules:
      # Frontend route
      - matches:
          - path:
              type: PathPrefix
              value: "/"
        backendRefs:
          - service: frontend
            port: 80
        filters:
          # Security headers for enterprise deployment
          - type: ResponseHeaderModifier
            responseHeaderModifier:
              add:
                - name: "X-Frame-Options"
                  value: "DENY"
                - name: "X-Content-Type-Options"
                  value: "nosniff"
                - name: "X-XSS-Protection"
                  value: "1; mode=block"
                - name: "Referrer-Policy"
                  value: "strict-origin-when-cross-origin"
                - name: "Content-Security-Policy"
                  value: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
      
      # API Processing route
      - matches:
          - path:
              type: PathPrefix
              value: "/api/processing"
        backendRefs:
          - service: api-processing
            port: 80
        filters:
          # CORS headers for API
          - type: ResponseHeaderModifier
            responseHeaderModifier:
              add:
                - name: "Access-Control-Allow-Origin"
                  value: "*"
                - name: "Access-Control-Allow-Methods"
                  value: "GET, POST, PUT, DELETE, OPTIONS"
                - name: "Access-Control-Allow-Headers"
                  value: "Content-Type, Authorization"
          # Security headers
          - type: ResponseHeaderModifier
            responseHeaderModifier:
              add:
                - name: "X-Content-Type-Options"
                  value: "nosniff"
                - name: "X-Frame-Options"
                  value: "DENY"
      
      # API Status route  
      - matches:
          - path:
              type: PathPrefix
              value: "/api/status"
        backendRefs:
          - service: api-status
            port: 80
        filters:
          # CORS headers for API
          - type: ResponseHeaderModifier
            responseHeaderModifier:
              add:
                - name: "Access-Control-Allow-Origin"
                  value: "*"
                - name: "Access-Control-Allow-Methods"
                  value: "GET, POST, PUT, DELETE, OPTIONS"
                - name: "Access-Control-Allow-Headers"
                  value: "Content-Type, Authorization"
          # Security headers
          - type: ResponseHeaderModifier
            responseHeaderModifier:
              add:
                - name: "X-Content-Type-Options"
                  value: "nosniff"
                - name: "X-Frame-Options"
                  value: "DENY"

# Application-specific configurations
apiProcessing:
  enabled: true
  name: api-processing
  image:
    repository: api-processing
    tag: ""
  replicaCount: 2
  port: 8000
  service:
    type: ClusterIP
    port: 80
    targetPort: 8000
  env:
    STORAGE_ACCOUNT_URL: ""
    STORAGE_CONTAINER: ""
    PROCESSED_BASE_URL: ""
    SERVICEBUS_FQDN: ""
    SERVICEBUS_QUEUE: ""
    APPLICATIONINSIGHTS_CONNECTION_STRING: ""
    CORS_ORIGIN: "*"
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

apiStatus:
  enabled: true
  name: api-status
  image:
    repository: api-status
    tag: ""
  replicaCount: 2
  port: 8000
  service:
    type: ClusterIP
    port: 80
    targetPort: 8000
  env:
    COSMOS_ACCOUNT_URL: ""
    COSMOS_DB_NAME: ""
    COSMOS_CONTAINER_NAME: ""
    APPLICATIONINSIGHTS_CONNECTION_STRING: ""
    RETRY_AFTER: "5"
    CORS_ORIGIN: "*"
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

frontend:
  enabled: true
  name: frontend
  image:
    repository: frontend
    tag: ""
  replicaCount: 2
  port: 80
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  env:
    REACT_APP_API_PROCESSING_URL: ""
    REACT_APP_API_STATUS_URL: ""
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

# NetworkPolicy (Enterprise Security Feature)
# Enabled automatically when Gateway API is used for enhanced security
networkPolicy:
  enabled: true
  # Namespace where the gateway controller is running
  gatewayNamespace: "nginx-system"
